---

- name: Check whether user is already configured
  command: "{{ mc_command }} admin user info {{ minio_alias }} {{ user.name }}"
  register: get_user
  changed_when: false
  ignore_errors: true

- name: Create users
  command: "{{ mc_command }} admin user add {{ minio_alias }} {{ user.name }} {{ user.password }}"
  register: add_user
  changed_when: '"Added user `" + user.name + "` successfully" in add_user.stdout'
  when:
    - get_user.rc==1
    - '"Unable to get user info" in get_user.stderr'

- name: Create users policy file
  template:
    src: minio_policy.json.j2
    dest: "{{ minio_policy_dir }}/{{ user.name }}.json"
    owner: "{{ minio_user }}"
    group: "{{ minio_group }}"
    mode: 0640
  register: create_policy

- name: Add user policy
  command: "{{ mc_command }} admin policy create {{ minio_alias }} {{ user.name }} {{ minio_policy_dir }}/{{ user.name }}.json"
  register: add_policy
  when: create_policy.changed
  changed_when: '"Added policy `" + user.name + "` successfully" in add_policy.stdout'

- name: Get policies attached to user
  command: "{{ mc_command }} admin policy entities {{minio_alias }} --user {{ user.name }} --json"
  register: get_policies
  changed_when: False
  failed_when: get_policies.rc != 0 or (get_policies.stdout | from_json)['status'] != "success"

- name: Extract policies
  set_fact:
    user_policies: "{{ get_policies.stdout | from_json | community.general.json_query('result.userMappings[0].policies') | default([]) }}"

- name: Apply user policy
  command: "{{ mc_command }} admin policy attach {{ minio_alias }} {{ user.name }} -u {{ user.name }}"
  register: apply_policy
  when: create_policy.changed or minio_alias not in user_policies
  changed_when: '"Policy `" + user.name + "` is set on user `" + user.name + "`" in apply_policy.stdout'
